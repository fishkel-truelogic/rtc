package ar.com.finit.owner.web.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.Response.Status;

import org.jboss.resteasy.client.ClientResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import ar.com.finit.dto.model.DistrictDTO;
import ar.com.finit.dto.model.StablishmentDTO;
import ar.com.finit.dto.model.UserDTO;
import ar.com.finit.dto.model.factory.DistrictDTOFactory;
import ar.com.finit.dto.model.factory.StablishmentDTOFactory;
import ar.com.finit.owner.web.rest.client.HttpProtocolHelper;
import ar.com.finit.owner.web.rest.client.RestElement;
import ar.com.finit.owner.web.session.UserSessionHelper;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

/**
 * @author leo
 */

@Controller
@RequestMapping("/stablishment")
public class StablishmentController {

	@Autowired
	private UserSessionHelper userSessionHelper;
	@Autowired
	private HttpProtocolHelper httpProtocolHelper;
	@Autowired
	private StablishmentDTOFactory stablishmentDTOFactory;
	@Autowired
	private DistrictDTOFactory districtDTOFactory;

	@RequestMapping({ "/", "" })
	public ModelAndView stablishment(HttpServletRequest request) {

		Map<String, Object> params = new HashMap<String, Object>();
		ClientResponse<String> response;
		String url;

		UserDTO user = userSessionHelper.getUser(request);

		url = httpProtocolHelper.getServiceUrl(RestElement.PRIV, RestElement.STABLISHMENT) + user.getId();
		response = httpProtocolHelper.getJsonRequest(url);

		if (response.getStatus() == Status.OK.getStatusCode()) {
			StablishmentDTO stablishment = stablishmentDTOFactory.makeDTO(response.getEntity());
			if (stablishment != null) {
				params.put("stablishment", stablishment);
				return new ModelAndView("stablishment", params);
			} 
			return newStablishment();
			
		} else {
			params.put("error", response.getStatus());
		}
		return new ModelAndView("stablishment", params);
	}
	
	@RequestMapping("/edit")
	public ModelAndView stablishmentEdit() {
		
		Map<String, Object> params = new HashMap<String, Object>();
		ClientResponse<String> response;
		String url;
		
		UserDTO user = userSessionHelper.getUser(null);
		
		url = httpProtocolHelper.getServiceUrl(RestElement.PRIV, RestElement.STABLISHMENT) + user.getId();
		response = httpProtocolHelper.getJsonRequest(url);
		
		if (response.getStatus() == Status.OK.getStatusCode()) {
			
			StablishmentDTO stablishment = stablishmentDTOFactory.makeDTO(response.getEntity());
			if (stablishment != null) {
				params.put("stablishment", stablishment);
				this.addDistrictParams(params);
				return new ModelAndView("edit/stablishment", params);
			} 
			return newStablishment();
			
		} else {
			params.put("error", response.getStatus());
		}
		
		return new ModelAndView("stablishment", params);
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	public ModelAndView createOrUpdate(@ModelAttribute("stablishment")StablishmentDTO stablishment, BindingResult result){
		if (stablishment.getId() == null) return this.create(stablishment);
		return this.update(stablishment);
	}
	
	private ModelAndView newStablishment() {
		Map<String, Object> params = new HashMap<String, Object>();
		this.addDistrictParams(params);
		params.put("stablishment", new StablishmentDTO());
		return new ModelAndView("create/stablishment", params);
	}

	private void addDistrictParams(Map<String, Object> params) {
		ClientResponse<String> response;
		String url;
		url = httpProtocolHelper.getServiceUrl(RestElement.PUB, RestElement.DISTRICT) + "states";
		response = httpProtocolHelper.getJsonRequest(url);
		if (response.getStatus() == Status.OK.getStatusCode()) {
			Gson gson = new Gson();
			List<String> states = gson.fromJson(response.getEntity(), new TypeToken<List<String>>(){}.getType());
			params.put("states", states);
			url = httpProtocolHelper.getServiceUrl(RestElement.PUB, RestElement.DISTRICT) + "?state=" + states.iterator().next();
			response = httpProtocolHelper.getJsonRequest(url);
			if (response.getStatus() == Status.OK.getStatusCode()) {
				List<DistrictDTO> districts = new ArrayList<DistrictDTO>();
				districts.addAll(districtDTOFactory.makeDTOs(response.getEntity()));
				params.put("districts", districts);
			}
		}
	}
	
	private ModelAndView create(StablishmentDTO stablishment) {
		ClientResponse<String> response;
		String url;
		
		String userId = this.userSessionHelper.getUser(null).getId();
		stablishment.setUserId(userId);
		
		url = httpProtocolHelper.getServiceUrl(RestElement.PRIV, RestElement.STABLISHMENT);
		response = httpProtocolHelper.postJsonRequest(url, stablishment);

		if (response.getStatus() == Status.OK.getStatusCode()) {
			return this.stablishment(null);
		}
		
		return newStablishment();
	}

	private ModelAndView update(StablishmentDTO stablishment) {
		Map<String, Object> params = new HashMap<String, Object>();
		ClientResponse<String> response;
		String url;

		url = httpProtocolHelper.getServiceUrl(RestElement.PRIV, RestElement.STABLISHMENT) + stablishment.getId();
		response = httpProtocolHelper.postJsonRequest(url, stablishment);
		
		if (response.getStatus() == Status.OK.getStatusCode()) {
			return this.stablishment(null);
		}
		
		this.addDistrictParams(params);
		params.put("stablishment", stablishment);
		return new ModelAndView("edit/stablishment", params);
	}

}