package ar.com.finit.owner.web.bean.template;

import java.io.IOException;
import java.security.Principal;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletRequest;

import org.jboss.resteasy.client.ClientResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import ar.com.finit.dto.model.RoleDTO;
import ar.com.finit.dto.model.UserDTO;
import ar.com.finit.dto.model.factory.UserCollectionPageFactory;
import ar.com.finit.dto.model.page.UserCollectionPage;
import ar.com.finit.owner.web.message.MessageManager;
import ar.com.finit.owner.web.rest.client.HttpProtocolHelper;
import ar.com.finit.owner.web.rest.client.RestElement;
import ar.com.finit.owner.web.session.UserSessionBean;

/**
 * @author leo
 */
@Component
@Scope(value = "request")
public class TemplateBean {

	@Autowired
	private HttpProtocolHelper httpProtocolHelper;
	@Autowired
	private UserCollectionPageFactory userCollectionPageFactory;
	@Autowired
	private MessageManager messageManager;
	@Autowired
	private UserSessionBean userSessionBean;
	private String afterSignIn;

	public String getAfterSignIn() {
		UserDTO user = userSessionBean.getUser();
		if (user == null) {
			HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
			Principal userPrincipal = request.getUserPrincipal();
			user = this.getUser(userPrincipal);
			userSessionBean.setUser(user);
		}
		afterSignIn = "Hola " + user.getUsername() + this.getRoles(user);
		return afterSignIn;
	}

	private UserDTO getUser(Principal userPrincipal) {
		ClientResponse<String> response = httpProtocolHelper.getJsonRequest(httpProtocolHelper.getServiceUrl(RestElement.ADMIN, RestElement.USER) + "?&username=" + userPrincipal.getName());
		if (response.getStatus() != 200) {
			messageManager.sendFatalMessage(messageManager.I18N, String.valueOf(response.getStatus()), "unexpectedError");
		}
		UserCollectionPage users = userCollectionPageFactory.makeDTO(response.getEntity());
		UserDTO user = new UserDTO();
		for (UserDTO it : users.getPageElements()) {
			if (it.getUsername().equals(userPrincipal.getName())) {
				user = it;
			}
		}
		return user;
	}

	public void setAfterSignIn(String afterSignIn) {
		this.afterSignIn = afterSignIn;
	}

	private String getRoles(UserDTO user) {
		String roleStr = " ";

		for (RoleDTO role : user.getRoles()) {
			if (FacesContext.getCurrentInstance().getExternalContext().isUserInRole(role.getName())) {
				roleStr += role.getName() + ", ";
			}
		}
		if (!roleStr.trim().isEmpty()) {
			roleStr = " Tenes los permisos:" + roleStr;

		}
		return roleStr.substring(0, roleStr.lastIndexOf(","));
	}

	public void logOut() throws IOException {
		FacesContext.getCurrentInstance().getExternalContext().invalidateSession();
		ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
		context.redirect(context.getRequestContextPath());
	}

}